server.port=8888
server.servlet.context-path=/pgf/api
#KAFKA PRODUCER
#This is a comma-separated list of broker hostnames and port numbers for connecting to the Kafka cluster. This is a required property.
spring.kafka.bootstrap-servers=localhost:9092
#key-serializer: This specifies the serializer class used to convert the message key into a byte array before sending it to Kafka. The default is org.apache.kafka.common.serialization.StringSerializer.
#value-serializer: This specifies the serializer class used to convert the message value into a byte array. The default is also org.apache.kafka.common.serialization.StringSerializer. You can change these to custom serializers depending on your message content format (e.g., JSON, Avro).
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#batch-size: This defines the number of messages batched together for sending, improving efficiency.
#spring.kafka.producer.batch-size=16384
#buffer-memory: This specifies the total memory size the producer can use to buffer messages waiting to be sent.
spring.kafka.producer.properties.buffer.memory=33554432
#retries: This sets the number of retries attempted for failed message sends before giving up. Default is Integer.MAX(2147483647) Recommended.
#spring.kafka.producer.retries=3
#acks: This configures the acknowledgement level for message sends, controlling the level of durability provided by Kafka.
#Possible values are 0 (no acknowledgment), 1 (leader acknowledgment), and all (acknowledgment from all in-sync replicas).
spring.kafka.producer.acks=all
#Idempotent Producer: Enable idempotent producer to ensure exactly-once semantics.
spring.kafka.producer.properties.enable.idempotence=true
#compression.type: This allows enabling compression (e.g., gzip, snappy) for messages to reduce network bandwidth usage.
spring.kafka.producer.compression-type=snappy
#KAFKA CONSUMER
#Auto Offset Reset: Specify the behavior when there is no initial offset in Kafka or the current offset doesn't exist on the server. Possible values are earliest, latest, and none.
spring.kafka.consumer.auto-offset-reset=latest
#Enable Auto Commit: Enable or disable auto-commit of offsets.
spring.kafka.consumer.enable-auto-commit=true
#Auto Commit Interval: Set the frequency with which the consumer offsets are auto-committed to Kafka if enable-auto-commit is set to true.
#spring.kafka.consumer.auto-commit-interval=100
#Max Poll Records: Set the maximum number of records returned in a single call to poll().
#spring.kafka.consumer.max-poll-records=500
#Isolation Level: Set the isolation level for reading data from Kafka. Possible values are read_uncommitted, read_committed.
#spring.kafka.consumer.isolation-level=read_committed